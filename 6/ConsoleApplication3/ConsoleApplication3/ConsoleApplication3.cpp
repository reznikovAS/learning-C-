// ConsoleApplication3.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>
#include <iomanip>
#include <string>

using namespace std;

// Структура для хранения информации о сельскохозяйственной культуре
struct Crop {
    string name;        // Наименование культуры
    char type;          // Тип культуры ('З' - зерновые, 'Б' - бобовые)
    int sownArea;       // Посевная площадь (га)
    int yield;          // Урожайность (ц/га)
};

// Функция для печати заголовка таблицы
void printHeader() {
    cout << " -------------------------------------------------------------------" << endl;
    cout << " |                  Сельскохозяйственные культуры                  |" << endl; 
    cout << " -------------------------------------------------------------------" << endl;
    cout << " | Наименование | Тип | Посевная площадь (га) | Урожайность (ц/га) |" << endl;
    cout << " -------------------------------------------------------------------" << endl;
}

// Функция для печати строки таблицы
void printRow(const Crop& crop) {
    cout << " | " << setw(13) << left << crop.name
        << " | " << setw(4) << crop.type
        << " | " << setw(20) << crop.sownArea
        << " | " << setw(16) << crop.yield
        << " | " << endl;
    cout << " -------------------------------------------------------------------" << endl;
}

// Функция для вывода всей таблицы
void printTable(const vector<Crop>& crops) {
    printHeader();  // Печать заголовка таблицы
    for (const auto& crop : crops) {
        printRow(crop);
    }
}

// Функция для добавления культуры
void addCrop(vector<Crop>& crops) {
    Crop newCrop;
    cout << "Введите наименование культуры: ";
    cin >> newCrop.name;
    cout << "Введите тип культуры (З - зерновые, Б - бобовые): ";
    cin >> newCrop.type;
    cout << "Введите посевную площадь (га): ";
    cin >> newCrop.sownArea;
    cout << "Введите урожайность (ц/га): ";
    cin >> newCrop.yield;
    crops.push_back(newCrop);
}

int main() {
    setlocale(LC_ALL, "Russian");
    vector<Crop> crops = {
        {"Соя", 'Б', 13000, 45},
        {"Чумиза", 'З',
8000, 17},
{"Рис", 'З', 25650, 24}
    };
    int action = 999;
    printTable(crops);

    while (action != 0) {
        cout << "Выберите действие над таблицей:" << '\n';
        cout << "1. Добавить культуру" << '\n';
        cout << "2. Изменить культуру" << '\n';
        cout << "3. Удалить культуру" << '\n';
        cout << "0. Завершить работу с таблицей" << '\n';
        cout << "Введите номер действия: ";
        cin >> action;

        switch (action) {
        case 1:
            addCrop(crops);
            break;
        case 2: {
            int index;
            cout << "Введите индекс культуры для изменения: ";
            cin >> index;
            if (index > 0 && index <= crops.size()) {
                cout << "Изменение культуры № " << index << '\n';
                Crop& crop = crops[index - 1];
                cout << "Введите новое наименование культуры: ";
                cin >> crop.name;
                cout << "Введите новый тип культуры (З - зерновые, Б - бобовые): ";
                cin >> crop.type;
                cout << "Введите новую посевную площадь (га): ";
                cin >> crop.sownArea;
                cout << "Введите новую урожайность (ц/га): ";
                cin >> crop.yield;
            }
            else {
                cout << "Некорректный индекс!" << '\n';
            }
            break;
        }
        case 3: {
            int index;
            cout << "Введите индекс культуры для удаления: ";
            cin >> index;
            if (index > 0 && index <= crops.size()) {
                crops.erase(crops.begin() + index - 1);
            }
            else {
                cout << "Некорректный индекс!" << '\n';
            }
            break;
        }
        case 0:
            cout << "Завершение работы с таблицей." << '\n';
            break;
        default:
            cout << "Неизвестное действие!" << '\n';
            break;
        }
        printTable(crops);
    }

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
